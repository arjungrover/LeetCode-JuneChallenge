/*
eg. s = ace  t= bandcef. O/p-> TRUE
Subsequence -> relative positioning of characters should be same.  Character may/may not come

BRUTE FORCE APPROACH -> Recursion generate subsequence and match

OPTIMISED APPROACH -> traverse on both. If character matches , move both pointers else bigger string pointer.

FACT TO BE USED -> Relative positioning plays an important role

*/
class Solution {
    public boolean isSubsequence(String s, String t) {
        
        int si = 0;
        int ti = 0;
        
        while(ti!=t.length() && si!=s.length()){
            if(s.charAt(si)==t.charAt(ti))
            {
                si++;
                ti++;
            }else{
                ti++;
            }
        }
        if(si==s.length())
            return true;
        
        return false;
    }
}