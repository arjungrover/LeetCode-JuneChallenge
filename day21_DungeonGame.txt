
/*
DP - Bottom up APPROACH

(r,c) -> min( (r+1)(c), (r)(c+1) ) energy needed by another block  - (r,c) this is min energy needed by me

basically its like we will get 3 toffess here in (r,c) and we need 4 toffees in another block. so we should bring 1 toffee before reaching here in (r,c)

if we need 4 toffees in next block and we will be gaining 10 tooffes in (r,c), then we just have to come alive here with 1 toffee as 1+10=11 > 4 reqd.

max((r,c),1) in case we dont need to bring any toffee. but to stay alive we should have 1


Time Complexity : O(m * n)
Space Complexity : O(m * n)

*/


class Solution {
    public int calculateMinimumHP(int[][] dungeon) {
        /*
        
        Greedy Approach Failed as we cant be sure if that path will work. 
        
        int m = dungeon.length;
        int n = dungeon[0].length;
        
        int res = 0;
        int src = 0;
        
        while(true){
            int x = src/n;
            int y = src%n;
            
            res+=dungeon[x][y];
            
            if(x+1<m && y+1<n){
                
                if(dungeon[x+1][y]>0 && dungeon[x][y+1]<0){
                   src = (x+1)*m + y; 
                }else if(dungeon[x+1][y]<0 && dungeon[x][y+1]>0){
                    src = (x*m) + y+1;
                }else if(dungeon[x+1][y]<0 && dungeon[x][y+1]<0){
                    
                    if(dungeon[x+1][y]>dungeon[x][y+1]){
                        src = (x+1)*m + y;
                    }else{
                         src = (x*m) + y+1;
                    }
                    
                }else{
                    //both positive
                     if(dungeon[x+1][y]<dungeon[x][y+1]){
                        src = (x*m) + y+1;
                    }else{
                         src = (x+1)*m + y;
                    }
                     
                }
                
            }else if(x+1<m){
                 src = (x+1)*m + y;
            }else if(y+1<n){
                src = (x*m) + y+1;
            }else{
                
                break;
            }
            // System.out.println(src);
        }
        
        
        return (res<0)?(res*-1)+1:1;
        
        
        */
        
        
        int m = dungeon.length;
        int n = dungeon[0].length;
        
        int[][] dp = new int[m][n];
        
        dp[m-1][n-1] = Math.max(1, 1 - dungeon[m-1][n-1]);
        
        for(int r = m-1; r>=0; r--){
            
            for(int c = n-1; c>=0; c--){
                
                if(r+1<m && c+1<n){
                    dp[r][c] = Math.max(1,  Math.min(dp[r+1][c], dp[r][c+1] ) - dungeon[r][c] );
                }else if(r+1<m){
                    dp[r][c] = Math.max(1, dp[r+1][c] - dungeon[r][c] );
                }else if(c+1<n){
                    dp[r][c] = Math.max(1, dp[r][c+1]-dungeon[r][c] );
                }else{
                    continue;
                }
            }
        }
        
        return dp[0][0];
    }
   
}