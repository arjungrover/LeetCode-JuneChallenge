//Approach1
//Time complexity -> O(2^n)
//TLE Recursive Approach
class Solution {
    int res = Integer.MAX_VALUE;
    public int twoCitySchedCost(int[][] costs) {
        if(costs.length==0)
            return 0;
        
        dfs(costs, 0, 0, 0, 0);
        return res;
    }
    public void dfs(int[][] costs, int as, int bs, int cost, int idx){
        if(idx==costs.length && as==bs){
            res = Math.min(cost, res);
            return;
        }
        if(idx==costs.length){
            return;
        }
        int n = costs.length/2;
        if(as>n || bs>n){
            return;
        }
        
        dfs(costs, as+1,bs, cost+costs[idx][0], idx+1);
        dfs(costs, as,bs+1, cost+costs[idx][1], idx+1);
    }
}




//APPROACH 2 -> O(nlogn)
//First we calculate cost of moving 2n to A city
//Then we will move n to A to B for which our diff is less/ cost of moving is less
//diff B-A is taken, them sorted and first n values are added
class Solution {
    public int twoCitySchedCost(int[][] costs) {
	int res = 0;
        int[] diff = new int[costs.length];
        int i=0;
        for(int[] cost: costs){
            res+=cost[0];
            diff[i] = cost[1]-cost[0];
            i++;
        }
        
        Arrays.sort(diff);
        int j=0;
        while(j<costs.length/2){
            res+=diff[j];
            j++;
        }
       return res;
        
    }
}