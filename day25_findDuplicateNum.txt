/*
HashSet as only one number is repeated.
Time Complexity : O(n)
Space Complexity : O(n)

Sorting the array. : 
Time Complexity : O(nlogn),  Space Complexity : O(1) / O(n) in case modification not allowed

But we cant modify array and not even use extra space.

we need to use some sort of array manipulation technique.

we will be using HARE AND TORTOISE METHOD (detect cycle in LL)

First of all, where does the cycle come from? Let's use the function f(x) = nums[x] to construct the sequence: x, nums[x], nums[nums[x]], nums[nums[nums[x]]], ....

Each new element in the sequence is an element in nums at the index of the previous element.

If one starts from x = nums[0], such a sequence will produce a linked list with a cycle.

The cycle appears because nums contains duplicates. The duplicate node is a cycle entrance.
Here is how it works:

index: 0. 1.  2.  3.  4.  5.  6
nums:  2. 6   4.  1   3.  1.  5 

2 -> 6 -> 4 -> 1 -> 3 -> 1 -> 5 


Eg :  [3,1,3,4,2]

First will be do while loop as we are starting from same position.
Second will be while loop as we want to find entrance and position can be same [starting point is entrance] or different.
*/

class Solution {
    public int findDuplicate(int[] nums) {
//      HashSet<Integer> hset = new HashSet<>();
    
//      for(int n:nums){
//          if(hset.contains(n))
//              return n;
         
//          hset.add(n);
//      }
        
//     return -1;
        
        int tortoise = nums[0];
        int hare = nums[0];
        
        do{
            
            tortoise = nums[tortoise];  //1 step
            hare = nums[nums[hare]];  //2 steps
            
        }while(tortoise!=hare);  
        
        //we found cycle
        
        //Now both will move with same speed
        
        System.out.println(tortoise);
        
        hare = nums[0];
        
        while(tortoise!=hare){
            tortoise = nums[tortoise];
            hare = nums[hare];
            
        }
        
        return hare;
    }
}