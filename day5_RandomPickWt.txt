/*
cummalative weights calculate
random number generate 1-maxwt
That random number is searched 

For [1,3,4,6] the probablity of choosing index 0 is 1/14, 1 is 3/14, 2 is 4/14 and 3 is 6/14.
Using Prefix sum I have converted the weight vector into a vector v:- [1,1+3, 1+3+4, 1+3+4+6].
In case of random numbers from 1 to 14, if the number is 1 then I return index 0, if number lies between [2-4] I return index 1, if number lies between [5-8] I return index 2 and if it lies in [9,14] I return index 3.

*/
class Solution {
    
    int[] cummWt;
    int total;
    public Solution(int[] w) {
        cummWt = new int[w.length];
        int sum = 0;
        for(int i=0;i<w.length;i++){
            sum+=w[i];
            cummWt[i] = sum; 
        }
        total = sum;
    }
    
    public int pickIndex() {
        
        int res = Arrays.binarySearch(cummWt, (int)(Math.random()*total)+1);
        if(res<0)
            return (-1*res - 1);                                                                    
        return res;
    }
}