/*
cummalative weights calculate
random number generate 1-maxwt
That random number is searched 

The problem is, we need to randomly pick an index proportional to its weight.
What this means? 
We have weights array, each
weights[i]  represents weight of index i. 
The more the weight is, then high chances of getting that index randomly.

suppose weights = [1, 3]
then 3 is larger, so there are high chances to get index 1.

We can know the chances of selecting each index by knowing their probability.

P(i) = weight[i]/totalWeight

totalWeight = 1 + 3 = 4
So, for index 0, P(0) = 1/4  = 0.25 = 25%
for index 1, P(1) = 3/4 = 0.75 = 75%

So, there are 25% of chances to pick index 0 and 75% chances to pick index 1.

For [1,3,4,6] the probablity of choosing index 0 is 1/14, 1 is 3/14, 2 is 4/14 and 3 is 6/14.
Using Prefix sum I have converted the weight vector into a vector v:- [1,1+3, 1+3+4, 1+3+4+6].
In case of random numbers from 1 to 14, if the number is 1 then I return index 0, if number lies between [2-4] I return index 1, if number lies between [5-8] I return index 2 and if it lies in [9,14] I return index 3.
So, basically I'm returning the index of the upperbound of the random generated number from vector v.

*/
class Solution {
    
    int[] cummWt;
    int total;
    public Solution(int[] w) {
        cummWt = new int[w.length];
        int sum = 0;
        for(int i=0;i<w.length;i++){
            sum+=w[i];
            cummWt[i] = sum; 
        }
        total = sum;
    }
    
    public int pickIndex() {
        
        int res = Arrays.binarySearch(cummWt, (int)(Math.random()*total)+1);
        if(res<0)
            return (-1*res - 1);                                                                    
        return res;
    }
}